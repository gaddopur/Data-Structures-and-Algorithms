<snippet>
	<content><![CDATA[
struct Comb {
	static int f[N], inv[N];

	static int modInverse(int a, int m=M-2) { 
	    int m0 = m; 
	    int y = 0, x = 1; 
	    if (m == 1) return 0; 
	    while (a > 1) { 
	        int q = a / m; 
	        int t = m; 
	        m = a % m, a = t; 
	        t = y; 
	        y = x - q * y; 
	        x = t; 
	    } 
	    if (x < 0) x += m0; 
	    return x; 
	} 

	static int Pow(int x, int p=M-2) { // this find inverse only if M is prime
		int ans = 1;
		while(p) {
			if(p&1)ans = (ans*x)%M;
			x = (x*x)%M;
			p >>= 1;
		}
		return ans;
	}
	
	static void init() {
		f[0] = 1, inv[0] = 1;
		for(int i = 1; i < N; i++) {
			f[i] = f[i-1]*i%M;
		}
		inv[N-1] = Pow(f[N-1]);
		for(int i = N-2; i > 0; i--)
			inv[i] = inv[i+1]*(i+1)%M;
	}
	int ncr(int n, int r) { // n must be greater then -1
		if(n < r || r < 0) return 0;
		return f[n]*inv[r]%M*inv[n-r]%M;
	}
	int npr(int n, int r) { // n must be greater then -1
		if(n < r || r < 0) return 0;
		return f[n]*inv[n-r]%M;
	}
};
int Comb::f[N];
int Comb::inv[N];

Comb::init(); // write this in main()
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>Comb</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
