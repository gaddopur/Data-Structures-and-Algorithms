<snippet>
	<content><![CDATA[
const int M = 998244353;
const int root=565042129;   // nth root of M
const int root_1=950391366; // inverse of root
const int root_pw=1<<20;    // value of n

int Pow(int base,int Pownent,int M){
	int ans=1;
	while(Pownent!=0){
		if(Pownent&1) ans=(1LL*ans*base)%M;
		base=(1LL*base*base)%M;
		Pownent>>=1;
	}
	return ans%M;
}

void fft(vi&a,bool invert){
	int i,j,n=(int)a.size();
	for(i=1,j=0;i<n;++i){
		int bit=n>>1;
		for(;j>=bit;bit>>=1){
			j-=bit;
		}
		j+=bit;
		if(i<j) swap(a[i],a[j]);
	}
	for(int len=2;len<=n;len<<=1){
		int wlen=invert?root_1:root;
		for(i=len;i<root_pw;i<<=1){
			wlen=(wlen*wlen%M);
		}
		for(i=0;i<n;i+=len){
			int w=1;
			for(j=0;j<len/2;++j){
				int u=a[i+j],v=(int)(a[i+j+len/2]*w%M);
				a[i+j]=(u+v+M)%M;
				a[i+j+len/2]=(u-v+M)%M;
				w=(w*wlen%M);
			}
		}
	}
	if(invert){
		int nrev=Pow(n,M-2,M);
		for(i=0;i<n;++i){
			a[i]=(a[i]*nrev%M);
		}
	}
}
void multiply(const vi &a,const vi &b,vi &res){
	vi fa(a.begin(),a.end()),fb(b.begin(),b.end());
	size_t n=1;
	while(n<max(a.size(),b.size())) n<<=1;
	n<<= 1;
	fa.resize(n),fb.resize(n);
	fft(fa,false),fft(fb,false);
	for(size_t i=0;i<n;++i){
		fa[i]*=fb[i];
	}
	fft(fa,true);
	res.resize(n);
	for(size_t i=0;i<n;++i){
		res[i]=fa[i];
	}
}

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>NTT</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
