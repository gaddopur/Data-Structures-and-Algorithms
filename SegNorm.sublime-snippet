<snippet>
	<content><![CDATA[
struct SegNorm {
	std::vector<int> t;
	int s, e;
	SegNorm(int n) {
		s = 0, e = n-1; // want start from 1 set s = 1;
		t.resize(n*4+1);
	}
	int combine(int x, int y) {
		return x+y; // write your condition
	}
	void build(int a[], int v, int tl, int tr) {
	    if (tl == tr) t[v] = a[tl];
	    else {
	        int tm = (tl + tr) / 2;
	        build(a, v*2, tl, tm);
	        build(a, v*2+1, tm+1, tr);
	        t[v] = combine(t[v*2], t[v*2+1]);
	    }
	}
	int query(int v, int tl, int tr, int l, int r) {
	    if (l == tl && r == tr) return t[v];
	    int tm = (tl + tr) / 2;
	    return combine(query(v*2, tl, tm, l, min(r, tm))
	           , query(v*2+1, tm+1, tr, max(l, tm+1), r));
	}
	void update(int v, int tl, int tr, int pos, int new_val) {
	    if (tl == tr) t[v] = new_val;
	    else {
	        int tm = (tl + tr) / 2;
	        if (pos <= tm) update(v*2, tl, tm, pos, new_val);
	        else update(v*2+1, tm+1, tr, pos, new_val);
	        t[v] = combine(t[v*2], t[v*2+1]);
	    }
	}
	int last(int v, int tl, int tr, int l, int r) {
	    if(t[v] == 0) return -1;// write your condition
	    if (tr == tl) return tl;
	    int tm = (tl + tr) / 2;
	    int ll = last(v*2+1, tm+1, tr, max(l, tm+1), r);
	    if(ll != -1) return ll;
	    return last(v*2, tl, tm, l, min(r, tm));
	}
	int first(int v, int tl, int tr, int l, int r) {
	    if(t[v] == 0) return -1; // write your condition 
	    if (tr == tl) return tl;
	    int tm = (tl + tr) / 2;
	    int ll = first(v*2, tl, tm, l, min(r, tm));
	    if(ll != -1) return ll;
	    return first(v*2+1, tm+1, tr, max(l, tm+1), r);
	}
	int query(int l, int r) {
		if(l > r) return 0; // write your own
		assert(l >= s && r <= e);
		return query(1, s, e, l, r); // 0 base indexing
	}
	int last(int l, int r) {
		if(l > r) return -1; // write your own
		assert(l >= s && r <= e);
		return last(1, s, e, l, r); // 0 base indexing
	}
	int first(int l, int r) {
		if(l > r) return -1; // write your own
		assert(l >= s && r <= e);
		return first(1, s, e, l, r); // 0 base indexing
	}
	void update(int pos, int x) {
		assert(pos >= s && pos <= e);
		update(1, s, e, pos, x);// 0 base indexing
	}
};

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>SegNorm</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
